module RegisterFile(
    input clk,                  // Clock signal
    input reset,                // Reset signal
    input reg_write,            // Register write enable
    input call,                 // Call instruction flag
    input [4:0] read_reg1,      // Register 1 address
    input [4:0] read_reg2,      // Register 2 address
    input [4:0] write_reg,      // Write register address
    input [31:0] write_data,    // Data to write
    input [31:0] pc_plus_4,     // PC+4 for CALL instruction
    output [31:0] read_data1,   // Read data 1
    output [31:0] read_data2    // Read data 2
);

    reg [31:0] registers [0:31]; // 32 registers, 32-bit wide
    integer i;

    // Initialize registers to 0
    initial begin
        for (i = 0; i < 32; i = i + 1)
            registers[i] = 32'b0;
    end

    // Asynchronous read (always available)
    assign read_data1 = registers[read_reg1];
    assign read_data2 = registers[read_reg2];

    // Synchronous write (on clock edge)
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset all registers to 0
            for (i = 0; i < 32; i = i + 1)
                registers[i] <= 32'b0;
        end
        else begin
            if (reg_write && write_reg != 5'b0) begin
                // Don't write to R0 (constant 0)
                registers[write_reg] <= write_data;
            end
            if (call) begin
                // CALL: Store return address in R31
                registers[31] <= pc_plus_4;
            end
        end
    end

endmodule
