module ALU(
    input [31:0] a,              // First operand
    input [31:0] b,              // Second operand
    input [4:0] alu_control,     // Control signal
    output reg [31:0] result,    // Result
    output zero,                 // Zero flag for branch instructions
    output reg greater           // Greater than flag for BGT
);

    always @(*) begin
        greater = 0;
        case(alu_control)
            5'b00000: result = a + b;                // ADD
            5'b00001: result = a - b;                // SUB
            5'b00010: result = a * b;                // MUL
            5'b00011: result = a / b;                // DIV
            5'b00100: result = a % b;                // MOD
            5'b00101: begin                          // CMP
                result = a - b;
                greater = (a > b) ? 1'b1 : 1'b0;
            end
            5'b00110: result = a & b;                // AND
            5'b00111: result = a | b;                // OR
            5'b01000: result = ~a;                   // NOT
            5'b01001: result = b;                    // MOV
            5'b01010: result = a << b;               // LSL (Logical Shift Left)
            5'b01011: result = a >> b;               // LSR (Logical Shift Right)
            5'b01100: result = $signed(a) >>> b;     // ASR (Arithmetic Shift Right)
            5'b01101: result = result;               // NOP - do nothing
            default: result = 32'b0;
        endcase
    end

    assign zero = (result == 32'b0) ? 1'b1 : 1'b0;

endmodule
