module InstructionMemory(
    input [31:0] pc,             // Program counter
    output [31:0] instruction    // Instruction output
);

    parameter ROW_I = 256;       // Define memory depth as parameter
    reg [31:0] memory [0:ROW_I-1]; // Instruction memory (ROM)
    
    // Initialize memory with sample program
    integer i;
    initial begin
        // Initialize all memory to zero first
        for (i = 0; i < ROW_I; i = i + 1)
            memory[i] = 32'b0;
            
        // Load specific instructions
        memory[0] = 32'h01001005; // mov r0, 5
        memory[1] = 32'h01001101; // mov r1, 1
        memory[2] = 32'h00010110; // mul r1, r1, r0
        memory[3] = 32'h00001001; // sub r0, r0, 1
        memory[4] = 32'h00101001; // cmp r0, 1
        memory[5] = 32'h10000003; // beq +3
        memory[6] = 32'h10010FC4; // b -4
        memory[7] = 32'h11111000; // hlt
    end

    // Word-aligned access (PC divided by 4)
    assign instruction = memory[pc[31:2]];

endmodule
